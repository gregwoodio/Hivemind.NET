/*
 * This file is autogenerated. Please see README.md for instructions on editing.
 */

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { TokenService } from './../../app/redux/TokenService';
import { FormDataHelper } from '../../app/clients/FormDataHelper';
import { Ganger } from '../entities/Ganger';
import { GangerWeapon } from '../entities/GangerWeapon';
import { Weapon } from '../entities/Weapon';

@Injectable()
export class GangersClient {

    constructor(
        private _http: HttpClient, 
        private _tokenService: TokenService,
        private _formDataHelper: FormDataHelper
    ) {}

    public GetGanger(
        gangerId: string,
    ): Observable<Ganger> {

        return this._http.get<Ganger>(
            'http://localhost:61774/api/gangers/' + gangerId + ''
            , {
                headers: new HttpHeaders({
                    'Authorization': 'Bearer ' + this._tokenService.token,
                    'Content-Type': 'application/x-www-form-urlencoded'
                })
            }
        );
    }

    public GetWeapons(
        gangerId: string,
    ): Observable<GangerWeapon[]> {

        return this._http.get<GangerWeapon[]>(
            'http://localhost:61774/api/gangers/' + gangerId + '/weapons'
            , {
                headers: new HttpHeaders({
                    'Authorization': 'Bearer ' + this._tokenService.token,
                    'Content-Type': 'application/x-www-form-urlencoded'
                })
            }
        );
    }

    public AddGangerWeapon(
        gangerId: string,
        weapon: Weapon,
    ): Observable<GangerWeapon> {
        const body = this._formDataHelper.getFormData(weapon);

        return this._http.post<GangerWeapon>(
            'http://localhost:61774/api/gangers/' + gangerId + '/weapons'
            , body
            , {
                headers: new HttpHeaders({
                    'Authorization': 'Bearer ' + this._tokenService.token,
                    'Content-Type': 'application/x-www-form-urlencoded'
                })
            }
        );
    }

    public RemoveGangerWeapon(
        gangerId: string,
        gangerWeaponId: string,
    ): Observable<string> {

        return this._http.delete<string>(
            'http://localhost:61774/api/gangers/' + gangerId + '/weapons/' + gangerWeaponId + ''
            , {
                headers: new HttpHeaders({
                    'Authorization': 'Bearer ' + this._tokenService.token,
                    'Content-Type': 'application/x-www-form-urlencoded'
                })
            }
        );
    }

    public UpdateGanger(
        ganger: Ganger,
    ): Observable<Ganger> {
        const body = this._formDataHelper.getFormData(ganger);

        return this._http.put<Ganger>(
            'http://localhost:61774/api/Gangers'
            , body
            , {
                headers: new HttpHeaders({
                    'Authorization': 'Bearer ' + this._tokenService.token,
                    'Content-Type': 'application/x-www-form-urlencoded'
                })
            }
        );
    }

    public AddGanger(
        ganger: Ganger,
    ): Observable<Ganger> {
        const body = this._formDataHelper.getFormData(ganger);

        return this._http.post<Ganger>(
            'http://localhost:61774/api/Gangers'
            , body
            , {
                headers: new HttpHeaders({
                    'Authorization': 'Bearer ' + this._tokenService.token,
                    'Content-Type': 'application/x-www-form-urlencoded'
                })
            }
        );
    }

}
