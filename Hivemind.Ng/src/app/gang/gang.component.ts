import { GangService } from './../redux/GangService';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { GangTerritory } from './../../autogenerated/entities/GangTerritory';
import { Territory } from './../../autogenerated/entities/Territory';
import { Store } from 'redux';
import { IAppState } from '../redux/IAppState';
import { Ganger } from './../../autogenerated/entities/Ganger';
import { NgRedux } from '@angular-redux/store';
import { Gang } from './../../autogenerated/entities/Gang';
import { Component, OnInit, Input } from '@angular/core';

@Component({
  selector: 'gang',
  templateUrl: './gang.component.html',
  styleUrls: ['./gang.component.css']
})
export class GangComponent {

  @Input() public gang: Gang;
  public gangers: Ganger[];
  public userGangs: string[];
  public territories: GangTerritory[];
  public activeTab = 1;
  public isGameInProgress: boolean;
  public showAddNewGangModal: boolean;
  public addGangForm: FormGroup;

  constructor(
    private _ngRedux: NgRedux<IAppState>,
    private _formBuilder: FormBuilder,
    private _gangService: GangService
  ) {

    _ngRedux.subscribe(() => {
      const state = _ngRedux.getState();
      this.gang = state.gang;
      this.gangers = state.gang.gangers;
      this.territories = state.gang.territories;
      this.userGangs = state.user.userGangIds; // TODO: fix this
    });

    this.addGangForm = _formBuilder.group({
      'gangName': ['', Validators.required],
      'gangHouse': ['', Validators.required]
    });
  }

  public addNewGang() {
    let gang = new Gang({
      name: this.addGangForm.controls['gangName'].value,
      gangHouse: this.addGangForm.controls['gangHouse'].value
    });

    this._gangService.addGang(gang);

    this.addGangForm.controls['gangName'].setValue('');
    this.addGangForm.contains['gangHouse'].setValue('');

    this.showAddNewGangModal = false;
  }

  public startGame() {
    this.isGameInProgress = true;
  }

  public cancelGame() {
    this.isGameInProgress = false;
  }
}
