import { GangsClient } from './../../autogenerated/clients/GangsClient';
import { WeaponsClient } from './../../autogenerated/clients/WeaponsClient';
import { Injectable } from "@angular/core";
import { IAppState } from './IAppState';
import { NgRedux } from '@angular-redux/store';
import { Weapon } from '../../autogenerated/entities/Weapon';
import { SET_WEAPONS } from './GangState';

@Injectable()
export class WeaponService {

    constructor(
        private _ngRedux: NgRedux<IAppState>,
        private _weaponsClient: WeaponsClient,
        private _gangsClient: GangsClient
    ) {}

    public getGangerWeaponsByGangId(gangId: string) {
        this._gangsClient.GetGangerWeapons(gangId).subscribe((weapons: Array<Weapon>) => {
            this._ngRedux.dispatch({
                type: SET_WEAPONS,
                payload: weapons
            });
        }, err => {
        });
    }

    public getGangStash(gangId: string) {
        this._gangsClient.GetGangStash(gangId).subscribe((weapons: Array<Weapon>) => {
            this._ngRedux.dispatch({
                type: SET_WEAPONS,
                payload: weapons
            });
        }, err => {
        });
    }

    public getAllWeapons() {
        this._weaponsClient.GetAllWeapons().subscribe((weapons: Array<Weapon>) => {
            this._ngRedux.dispatch({
                type: SET_WEAPONS,
                payload: weapons
            });
        }, err => {
        });
    }
}