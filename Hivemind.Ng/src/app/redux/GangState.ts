import { GangerBattleStats } from './../../autogenerated/entities/GangerBattleStats';
import { BattleReport } from './../../autogenerated/entities/BattleReport';
import { User } from './../../autogenerated/entities/User';
import { Ganger } from '../../autogenerated/entities/Ganger';
import { Gang } from '../../autogenerated/entities/Gang';
import { AnyAction, Reducer } from 'redux';
import { IAppState } from './IAppState';
import { Weapon } from '../../autogenerated/entities/Weapon';
import { GameData } from './GameData';

// action type constants
export const SET_USER: string = 'GangState.SET_USER';
export const CHANGE_GANG: string = 'GangState.CHANGE_GANG';
export const ADD_GANG: string = 'GangState.ADD_GANG';
export const ADD_GANGER: string = 'GangState.ADD_GANGER';
export const EDIT_GANG: string = 'GangState.EDIT_GANG';
export const EDIT_GANGER: string = 'GangState.EDIT_GANGER';
export const BUY_WEAPON: string = 'GangState.BUY_WEAPON';
export const EQUIP_WEAPON: string = 'GangState.EQUIP_WEAPON';
export const SET_WEAPONS: string = 'GangState.SET_WEAPONS';

// game actions
export const START_GAME: string = 'GangState.START_GANG';
export const FINISH_GAME: string = 'GangState.FINISH_GAME';
export const CANCEL_GAME: string = 'GangState.CANCEL_GANG';
export const SET_KILL: string = 'GangState.SET_KILL';
export const SET_OBJECTIVE: string = 'GangState.SET_OBJECTIVE';
export const SET_DOWN: string = 'GangState.SET_DOWN';
export const SET_OUT_OF_ACTION: string = 'GangState.SET_OUT_OF_ACTION';

// token actions
export const SET_TOKEN: string = 'TokenState.SET_TOKEN';

const initialState: IAppState = {
    user: undefined,
    gang: undefined,
    weapons: undefined,
    token: '',
    inGame: false,
    battleReport: undefined
};

export const reduce: Reducer<IAppState> = (state: IAppState = initialState, action: AnyAction): IAppState => {
    let newState: IAppState;

    switch (action.type) {
        case SET_USER:
            if (action.payload !instanceof User) {
                return state;
            }
            newState = Object.assign({}, state, { user: action.payload });
            return newState;

        case CHANGE_GANG:
            if (action.payload !instanceof Gang) {
                return state;
            } 
            newState = Object.assign({}, state, { gang: action.payload });
            return newState;

        case ADD_GANG:
            if (action.payload !instanceof Gang) {
                return state;
            } 
            newState = Object.assign({}, state, { gang: action.payload });
            return newState;

        case ADD_GANGER:
            if (action.payload !instanceof Ganger) {
                return state;
            }
            newState = Object.assign({}, state, { gang: state.gang });
            newState.gang.gangers.push(action.payload);
            return newState;

        case SET_WEAPONS:
            if (!(action.payload instanceof Array)) {
                return state;
            }

            action.payload.forEach(weapon => {
                if (weapon !instanceof Weapon) {
                    return state;
                }
            });

            newState = Object.assign({}, state, {weapons: action.payload });
            return newState;

        case START_GAME:
            const gang = state.gang as Gang;
            const stats = new Array<GangerBattleStats>();

            gang.gangers.forEach((ganger: Ganger) => {
                stats.push(new GangerBattleStats({
                    gangerId: ganger.gangerId,
                    kills: 0,
                    objectives: 0,
                    down: false,
                    outOfAction: false
                }));
            });

            return Object.assign({}, state, {
                inGame: true,
                battleReport: new BattleReport({
                    gangBattleStats: stats,
                    gangId: gang.gangId
                })
            });

        case CANCEL_GAME:
            return Object.assign({}, state, {
                inGame: false,
                battleReport: undefined
            });

        case FINISH_GAME:
            if (!(action.payload instanceof BattleReport)) {
                return state;
            }

            let report = Object.assign({}, state.battleReport, {
                hasWon: action.payload.hasWon,
                opponentGangRating: action.payload.opponentGangRating,
                isAttacker: action.payload.isAttacker,
                gameType: action.payload.gameType
            });

            return Object.assign({}, state, {
                BattleReport: report
            });

        case SET_DOWN:
            if (!(action.payload instanceof GameData)) {
                return state;
            }

            report = Object.assign({}, state.battleReport);

            report.gangBattleStats = report.gangBattleStats.map(s => {
                if (s.gangerId === (<GameData>action.payload).gangerId) {
                    s.down = action.payload.value;
                }
                return s;
            });

            return Object.assign({}, state, {
                battleReport: report
            });

        case SET_OUT_OF_ACTION:
            if (!(action.payload instanceof GameData)) {
                return state;
            }

            report = Object.assign({}, state.battleReport);

            report.gangBattleStats = report.gangBattleStats.map(s => {
                if (s.gangerId === (<GameData>action.payload).gangerId) {
                    s.outOfAction = action.payload.value;
                }
                return s;
            });

            return Object.assign({}, state, {
                battleReport: report
            });

        case SET_KILL:
            if (!(action.payload instanceof GameData)) {
                return state;
            }

            report = Object.assign({}, state.battleReport);

            report.gangBattleStats = report.gangBattleStats.map(s => {
                if (s.gangerId === (<GameData>action.payload).gangerId) {
                    s.kills = action.payload.value;
                }
                return s;
            });

            return Object.assign({}, state, {
                battleReport: report
            });

        case SET_OBJECTIVE:
            if (!(action.payload instanceof GameData)) {
                return state;
            }

            report = Object.assign({}, state.battleReport);

            report.gangBattleStats = report.gangBattleStats.map(s => {
                if (s.gangerId === (<GameData>action.payload).gangerId) {
                    s.objectives = action.payload.value;
                }
                return s;
            });

            return Object.assign({}, state, {
                battleReport: report
            });

        case SET_TOKEN:
            if ((action.payload as string) == null) {
                return state;
            }
            newState = Object.assign({}, state, { token: action.payload });
            return newState;

        default:
            return state;
    }
}
