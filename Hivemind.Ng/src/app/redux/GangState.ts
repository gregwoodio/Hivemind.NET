import { User } from './../../autogenerated/entities/User';
import { Ganger } from '../../autogenerated/entities/Ganger';
import { Gang } from '../../autogenerated/entities/Gang';
import { AnyAction, Reducer } from 'redux';
import { IAppState } from './IAppState';
import { Weapon } from '../../autogenerated/entities/Weapon';

// action type constants
export const SET_USER: string = 'GangState.SET_USER';
export const CHANGE_GANG: string = 'GangState.CHANGE_GANG';
export const ADD_GANG: string = 'GangState.ADD_GANG';
export const ADD_GANGER: string = 'GangState.ADD_GANGER';
export const EDIT_GANG: string = 'GangState.EDIT_GANG';
export const EDIT_GANGER: string = 'GangState.EDIT_GANGER';
export const BUY_WEAPON: string = 'GangState.BUY_WEAPON';
export const EQUIP_WEAPON: string = 'GangState.EQUIP_WEAPON';
export const SET_WEAPONS: string = 'GangState.SET_WEAPONS';

// token actions
export const SET_TOKEN: string = 'TokenState.SET_TOKEN';

const initialState: IAppState = {
    user: undefined,
    gang: undefined,
    weapons: undefined,
    token: ''
};

export const reduce: Reducer<IAppState> = (state: IAppState = initialState, action: AnyAction): IAppState => {
    let newState: IAppState;

    switch (action.type) {
        case SET_USER:
            if (action.payload !instanceof User) {
                return state;
            }
            newState = Object.assign({}, state, { user: action.payload });
            return newState;

        case CHANGE_GANG:
            if (action.payload !instanceof Gang) {
                return state;
            } 
            newState = Object.assign({}, state, { gang: action.payload });
            return newState;

        case ADD_GANG:
            if (action.payload !instanceof Gang) {
                return state;
            } 
            newState = Object.assign({}, state, { gang: action.payload });
            return newState;

        case ADD_GANGER:
            if (action.payload !instanceof Ganger) {
                return state;
            }
            newState = Object.assign({}, state, { gang: state.gang });
            newState.gang.gangers.push(action.payload);
            return newState;

        case SET_WEAPONS:
            if (!(action.payload instanceof Array)) {
                return state;
            }

            action.payload.forEach(weapon => {
                if (weapon !instanceof Weapon) {
                    return state;
                }
            });

            newState = Object.assign({}, state, {weapons: action.payload });
            return newState;

        case SET_TOKEN:
            if ((action.payload as string) == null) {
                return state;
            }
            newState = Object.assign({}, state, { token: action.payload });
            return newState;

        default:
            return state;
    }
}
