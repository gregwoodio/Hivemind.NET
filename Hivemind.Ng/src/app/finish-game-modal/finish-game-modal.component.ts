import { CANCEL_GAME } from './../redux/GangState';
import { PostGameReport } from './../../autogenerated/entities/PostGameReport';
import { IAppState } from './../redux/IAppState';
import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { GameService } from '../redux/GameService';
import { NgRedux } from '@angular-redux/store';
import { BattleReport } from '../../autogenerated/entities/BattleReport';
import { Gang } from '../../autogenerated/entities/Gang';

@Component({
  selector: 'finish-game-modal',
  templateUrl: './finish-game-modal.component.html',
  styleUrls: ['./finish-game-modal.component.css']
})
export class FinishGameModalComponent {

  public showFinishGameModal: boolean;
  public finishGameForm: FormGroup;
  public isPostGame: boolean;
  public isPostGameLoading: boolean;
  public postGameReport: PostGameReport;

  private _gang: Gang;
  private _battleReport: BattleReport;

  constructor(
    private _formBuilder: FormBuilder,
    private _gameService: GameService,
    private _ngRedux: NgRedux<IAppState>
  ) {
    this.finishGameForm = this._formBuilder.group({
      'hasWon': [false, Validators.required],
      'isAttacker': [false, Validators.required],
      'opponentGangRating': [0, Validators.required],
      'gameType': ['lbl_gametype_gang_fight', Validators.required]
    });

    this._ngRedux.subscribe(() => {
      const state = this._ngRedux.getState();
      this._gang = state.gang;
      this._battleReport = state.battleReport;

      if (!!state.postGameReport) {
        this.postGameReport = state.postGameReport;
        this.isPostGameLoading = false;
      }
    });
  }

  public display() {
    this.showFinishGameModal = true;
  }

  public finishGame() {
    this._battleReport = Object.assign(this._battleReport, {
      gangId: this._gang.gangId,
      hasWon: this.finishGameForm.controls['hasWon'].value,
      isAttacker: this.finishGameForm.controls['isAttacker'].value,
      opponentGangRating: this.finishGameForm.controls['opponentGangRating'].value,
      gameType: this.finishGameForm.controls['gameType'].value,
    });

    this._gameService.processGame(this._battleReport);

    this.isPostGameLoading = true;
    this.isPostGame = true;
  }

  public submitUpgrades() {
    // submit ganger skill upgrades and close modal
    this.hideFinishGameModal();
  }

  public hideFinishGameModal() {
    this.showFinishGameModal = false;
    this.isPostGame = false;
    this.isPostGameLoading = false;
    this._battleReport = undefined;
    this.finishGameForm.controls['hasWon'].setValue(false);
    this.finishGameForm.controls['isAttacker'].setValue(false);
    this.finishGameForm.controls['opponentGangRating'].setValue(0);
    this.finishGameForm.controls['gameType'].setValue(undefined);

    this._ngRedux.dispatch({
      type: CANCEL_GAME
    });
  }
}
