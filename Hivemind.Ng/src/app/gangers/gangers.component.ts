import { GangerBattleStats } from './../../autogenerated/entities/GangerBattleStats';
import { BattleReport } from './../../autogenerated/entities/BattleReport';
import { GangerService } from './../redux/GangerService';
import { FormBuilder, FormGroup, Validators, FormArray, FormControl } from '@angular/forms';
import { NgRedux } from '@angular-redux/store';
import { IAppState } from './../redux/IAppState';
import { Gang } from './../../autogenerated/entities/Gang';
import { Ganger } from './../../autogenerated/entities/Ganger';
import { Component, OnInit, Input } from '@angular/core';
import { GameService } from '../redux/GameService';
import { CANCEL_GAME, SET_DOWN, SET_OBJECTIVE, SET_OUT_OF_ACTION, SET_KILL } from '../redux/GangState';
import { GameData } from '../redux/GameData';

@Component({
  selector: 'gangers',
  templateUrl: './gangers.component.html',
  styleUrls: ['./gangers.component.css']
})
export class GangersComponent implements OnInit {
  public gangers: Ganger[];
  public gang: Gang;
  public addGangerForm: FormGroup;
  public showAddGangerDialog: boolean;
  public isGameInProgress: boolean;
  public showFinishGameDialog: boolean;

  constructor(
    private _formBuilder: FormBuilder,
    private _gangerService: GangerService,
    private _gameService: GameService,
    private _ngRedux: NgRedux<IAppState>
  ) {
    this._ngRedux.subscribe(() => {
      const state = this._ngRedux.getState();
      this.gang = state.gang;

      if (state.gang) {
        this.gangers = state.gang.gangers;
      }

      this.isGameInProgress = state.inGame;
    });

    this.addGangerForm = _formBuilder.group({
      'gangerName': ['', Validators.required],
      'gangerType': ['', Validators.required]
    });


    this.gangers = new Array<Ganger>();
  }

  public ngOnInit() {
    const state = this._ngRedux.getState();
    this.gang = state.gang;
    if (state.gang && state.gang.gangers) {
      this.gangers = state.gang.gangers;
    }
  }

  public displayAddGangerDialog() {
    this.addGangerForm.controls['gangerName'].setValue('');
    this.addGangerForm.controls['gangerType'].setValue('Juve');
    this.showAddGangerDialog = true;
  }

  public checkAddGangerType() {
    // check if the gang can afford to add a new ganger
  }

  public submitAddGangerForm() {
    const ganger = new Ganger({
      name: this.addGangerForm.controls['gangerName'].value,
      gangerType: this.addGangerForm.controls['gangerType'].value,
      gangId: this.gang.gangId
    });

    this._gangerService.addGanger(ganger);
    this.showAddGangerDialog = false;
  }

  public parseGangerEquipment(ganger: Ganger): string {
    if (!ganger.weapons) {
      return '';
    }
    return ganger.weapons.map(weapon => weapon.weapon.name).join(', ');
  }

  public parseGangerInjuries(ganger: Ganger): string {
    if (!ganger.injuries) {
      return '';
    }
    return ganger.injuries.map(injury => injury.name).join(', ');
  }

  public parseGangerSkills(ganger: Ganger): string {
    if (!ganger.skills) {
      return '';
    }
    return ganger.skills.map(skill => skill.name).join(', ');
  }

  public setDown(gangerId: string, event: MouseEvent) {
    this._ngRedux.dispatch({
      type: SET_DOWN,
      payload: new GameData({
        gangerId: gangerId,
        value: (<HTMLInputElement>event.srcElement).checked
      })
    });
  }

  public setOutOfAction(gangerId: string, event: MouseEvent) {
    this._ngRedux.dispatch({
      type: SET_OUT_OF_ACTION,
      payload: new GameData({
        gangerId: gangerId,
        value: (<HTMLInputElement>event.srcElement).checked
      })
    });
  }

  public setKills(gangerId: string, event: KeyboardEvent) {
    let value = parseInt((<HTMLInputElement>event.srcElement).value, 10);
    if (value < 0) {
      value = 0;
    }
    this._ngRedux.dispatch({
      type: SET_KILL,
      payload: new GameData({
        gangerId: gangerId,
        value: value
      })
    });
  }

  public setObjectives(gangerId: string, event: KeyboardEvent) {
    let value = parseInt((<HTMLInputElement>event.srcElement).value, 10);
    if (value < 0) {
      value = 0;
    }
    this._ngRedux.dispatch({
      type: SET_OBJECTIVE,
      payload: new GameData({
        gangerId: gangerId,
        value: value
      })
    });
  }

  public toggleFleshwound(ganger: Ganger) {
    let g = this.gangers.find(g => g.gangerId == ganger.gangerId);
    if (g.hasFleshWound) {
      g.weaponSkill++;
      g.ballisticSkill++;
    } else {
      g.weaponSkill--;
      g.ballisticSkill--;
    }

    g.hasFleshWound = !g.hasFleshWound;
  }
}
