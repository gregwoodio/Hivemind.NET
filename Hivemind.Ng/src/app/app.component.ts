import { SignupModalComponent } from './signup-modal/signup-modal.component';
import { User } from './../autogenerated/entities/User';
import { IAppState } from './redux/IAppState';
import { NgRedux } from '@angular-redux/store';
import { LoginModalComponent } from './login-modal/login-modal.component';
import { UserService } from './redux/UserService';
import { LoginResponse } from './clients/LoginResponse';
import { TokenService } from './redux/TokenService';
import { Gang } from './../autogenerated/entities/Gang';
import { GangService } from './redux/GangService';
import { Component, ViewChild } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { LoginClient } from 'app/clients/LoginClient';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {

  public title = 'Hivemind NG';
  public user: User;
  public isLoggedIn: boolean;
  public gang: Gang;
  @ViewChild('loginModal') loginModal: LoginModalComponent;
  @ViewChild('signupModal') signupModal: SignupModalComponent;

  constructor(
    private _tokenService: TokenService,
    private _userService: UserService,
    private _loginClient: LoginClient,
    private _ngRedux: NgRedux<IAppState>
    ) {
      _ngRedux.subscribe(() => {
        const state = _ngRedux.getState();
        this.user = state.user;
        this.isLoggedIn = !!state.user;
        this.gang = state.gang;
      });

      if (this._tokenService.token) {
        this._userService.getUser();
      }
  }

  public showLoginModalDialog() {
    this.loginModal.display();
  }

  public showSignUpModalDialog() {
    this.signupModal.display();
  }

  public logout() {
    this._tokenService.setToken('');
    this._userService.logout();
  }
}
