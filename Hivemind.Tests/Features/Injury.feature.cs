// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Hivemind.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Injury")]
    public partial class InjuryFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Injury.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Injury", "\tGangers may incur injuries after games, which affect their statistics.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has been killed")]
        public virtual void AGangerHasBeenKilled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has been killed", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active"});
            table1.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true"});
#line 5
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table1, "Given ");
#line 8
 testRunner.When("the ganger gets the injury \"DEAD\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("the ganger should not be active anymore", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has multiple injuries")]
        public virtual void AGangerHasMultipleInjuries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has multiple injuries", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active"});
            table2.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true"});
#line 12
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table2, "Given ");
#line 15
 testRunner.When("the ganger gets the injury \"MULTIPLE_INJURIES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the ganger should get at least one more injury.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has a chest wound.")]
        public virtual void AGangerHasAChestWound_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has a chest wound.", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active"});
            table3.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true"});
#line 19
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table3, "Given ");
#line 22
 testRunner.When("the ganger gets the injury \"CHEST_WOUND\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the ganger should have their toughness reduced by 1.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has a leg wound.")]
        public virtual void AGangerHasALegWound_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has a leg wound.", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active"});
            table4.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true"});
#line 26
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table4, "Given ");
#line 29
 testRunner.When("the ganger gets the injury \"LEG_WOUND\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("the ganger should have their movement reduced by 1.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has an arm wound.")]
        public virtual void AGangerHasAnArmWound_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has an arm wound.", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active"});
            table5.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true"});
#line 33
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table5, "Given ");
#line 36
 testRunner.When("the ganger gets the injury \"ARM_WOUND\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the ganger should have their strength reduced by 1.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has a head wound.")]
        public virtual void AGangerHasAHeadWound_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has a head wound.", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active"});
            table6.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true"});
#line 40
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table6, "Given ");
#line 43
 testRunner.When("the ganger gets the injury \"HEAD_WOUND\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("the ganger should have a head wound.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger is blinded in one eye.")]
        public virtual void AGangerIsBlindedInOneEye_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger is blinded in one eye.", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "IsOneEyed"});
            table7.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "false"});
#line 47
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table7, "Given ");
#line 50
 testRunner.When("the ganger gets the injury \"BLINDED_IN_ONE_EYE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("the ganger should have their ballistic skill redeced by 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
 testRunner.And("the ganger should be marked as having only one eye.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger is blinded in their other eye.")]
        public virtual void AGangerIsBlindedInTheirOtherEye_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger is blinded in their other eye.", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "IsOneEyed"});
            table8.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "true"});
#line 55
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table8, "Given ");
#line 58
 testRunner.When("the ganger gets the injury \"BLINDED_IN_ONE_EYE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then("the ganger should not be active anymore", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger is partially deafened.")]
        public virtual void AGangerIsPartiallyDeafened_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger is partially deafened.", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "IsDeafened"});
            table9.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "false"});
#line 62
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table9, "Given ");
#line 65
 testRunner.When("the ganger gets the injury \"PARTIALLY_DEAFENED\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("the ganger should be marked as partially deafened.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger is partially deafened again.")]
        public virtual void AGangerIsPartiallyDeafenedAgain_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger is partially deafened again.", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "IsDeafened"});
            table10.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "true"});
#line 69
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table10, "Given ");
#line 72
 testRunner.When("the ganger gets the injury \"PARTIALLY_DEAFENED\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("the ganger should have their leadership reduced by 1.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has shell shock.")]
        public virtual void AGangerHasShellShock_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has shell shock.", ((string[])(null)));
#line 75
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "RightHandFingers",
                        "LeftHandFingers"});
            table11.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "5",
                        "5"});
#line 76
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table11, "Given ");
#line 79
 testRunner.When("the ganger gets the injury \"SHELL_SHOCK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("the ganger should have their initiative reduced by 1.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has a hand injury.")]
        public virtual void AGangerHasAHandInjury_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has a hand injury.", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "RightHandFingers",
                        "LeftHandFingers"});
            table12.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "5",
                        "5"});
#line 83
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table12, "Given ");
#line 86
 testRunner.When("the ganger gets the injury \"HAND_INJURY\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
 testRunner.Then("the ganger loses some fingers on either hand.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.And("the ganger should have their weapon skill reduced by 1.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has a hand injury resulting in loss of the arm.")]
        public virtual void AGangerHasAHandInjuryResultingInLossOfTheArm_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has a hand injury resulting in loss of the arm.", ((string[])(null)));
#line 90
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "RightHandFingers",
                        "LeftHandFingers"});
            table13.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "1",
                        "1"});
#line 91
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table13, "Given ");
#line 94
 testRunner.When("the ganger gets the injury \"HAND_INJURY\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.Then("the ganger should be one armed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has an old battle wound.")]
        public virtual void AGangerHasAnOldBattleWound_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has an old battle wound.", ((string[])(null)));
#line 97
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "RightHandFingers",
                        "LeftHandFingers"});
            table14.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "5",
                        "5"});
#line 98
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table14, "Given ");
#line 101
 testRunner.When("the ganger gets the injury \"OLD_BATTLE_WOUND\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("the ganger should have an old battle wound.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has made a full recovery.")]
        public virtual void AGangerHasMadeAFullRecovery_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has made a full recovery.", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "RightHandFingers",
                        "LeftHandFingers"});
            table15.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "5",
                        "5"});
#line 105
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table15, "Given ");
#line 108
 testRunner.When("the ganger gets the injury \"FULL_RECOVERY\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
 testRunner.Then("the ganger should not have a statistics change.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has bitter enmity.")]
        public virtual void AGangerHasBitterEnmity_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has bitter enmity.", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "RightHandFingers",
                        "LeftHandFingers"});
            table16.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "5",
                        "5"});
#line 112
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table16, "Given ");
#line 115
 testRunner.When("the ganger gets the injury \"BITTER_ENMITY\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("the ganger should have bitter enmity.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger was captured.")]
        public virtual void AGangerWasCaptured_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger was captured.", ((string[])(null)));
#line 118
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "RightHandFingers",
                        "LeftHandFingers"});
            table17.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "5",
                        "5"});
#line 119
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table17, "Given ");
#line 122
 testRunner.When("the ganger gets the injury \"CAPTURED\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("the ganger should be marked as a captive.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has horrible scars.")]
        public virtual void AGangerHasHorribleScars_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has horrible scars.", ((string[])(null)));
#line 125
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "RightHandFingers",
                        "LeftHandFingers"});
            table18.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "5",
                        "5"});
#line 126
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table18, "Given ");
#line 129
 testRunner.When("the ganger gets the injury \"HORRIBLE_SCARS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 130
 testRunner.Then("the ganger should have horrible scars.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger has impressive scars.")]
        public virtual void AGangerHasImpressiveScars_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger has impressive scars.", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "HasImpressiveScars"});
            table19.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "false"});
#line 133
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table19, "Given ");
#line 136
 testRunner.When("the ganger gets the injury \"IMPRESSIVE_SCARS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.Then("the ganger\'s leadership should increase by 1.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 138
 testRunner.And("the ganger should be marked as having impressive scars.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger gets impressive scars again.")]
        public virtual void AGangerGetsImpressiveScarsAgain_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger gets impressive scars again.", ((string[])(null)));
#line 140
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "HasImpressiveScars"});
            table20.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "true"});
#line 141
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table20, "Given ");
#line 144
 testRunner.When("the ganger gets the injury \"IMPRESSIVE_SCARS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 145
 testRunner.Then("the ganger should not have a statistics change.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A ganger survives against the odds.")]
        public virtual void AGangerSurvivesAgainstTheOdds_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ganger survives against the odds.", ((string[])(null)));
#line 147
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Move",
                        "WeaponSkill",
                        "BallisticSkill",
                        "Strength",
                        "Toughness",
                        "Wounds",
                        "Initiative",
                        "Attack",
                        "Leadership",
                        "Experience",
                        "Active",
                        "HasImpressiveScars"});
            table21.AddRow(new string[] {
                        "Ganger",
                        "4",
                        "3",
                        "3",
                        "3",
                        "3",
                        "1",
                        "3",
                        "1",
                        "7",
                        "21",
                        "true",
                        "true"});
#line 148
 testRunner.Given("a ganger with stats as follows:", ((string)(null)), table21, "Given ");
#line 151
 testRunner.When("the ganger gets the injury \"SURVIVES_AGAINST_THE_ODDS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
 testRunner.Then("the ganger should have an experience increase.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
